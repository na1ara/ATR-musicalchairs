#include <iostream>
#include <thread>
#include <vector>
#include <mutex>
#include <condition_variable>
#include <semaphore>
#include <atomic>
#include <chrono>
#include <random>

// Global variables for synchronization
constexpr int NUM_JOGADORES = 4;
std::counting_semaphore<NUM_JOGADORES> cadeira_sem(NUM_JOGADORES - 1); // Inicia com n-1 cadeiras, capacidade m√°xima n
std::condition_variable music_cv;
std::mutex music_mutex;
std::atomic<bool> musica_parada{false};
std::atomic<bool> jogo_ativo{true};

/*
 * Uso b√°sico de um counting_semaphore em C++:
 * 
 * O `std::counting_semaphore` √© um mecanismo de sincroniza√ß√£o que permite controlar o acesso a um recurso compartilhado 
 * com um n√∫mero m√°ximo de acessos simult√¢neos. Neste projeto, ele √© usado para gerenciar o n√∫mero de cadeiras dispon√≠veis.
 * Inicializamos o sem√°foro com `n - 1` para representar as cadeiras dispon√≠veis no in√≠cio do jogo. 
 * Cada jogador que tenta se sentar precisa fazer um `acquire()`, e o sem√°foro permite que at√© `n - 1` jogadores 
 * ocupem as cadeiras. Quando todos os assentos est√£o ocupados, jogadores adicionais ficam bloqueados at√© que 
 * o coordenador libere o sem√°foro com `release()`, sinalizando a elimina√ß√£o dos jogadores.
 * O m√©todo `release()` tamb√©m pode ser usado para liberar m√∫ltiplas permiss√µes de uma s√≥ vez, por exemplo: `cadeira_sem.release(3);`,
 * o que permite destravar v√°rias threads de uma s√≥ vez, como √© feito na fun√ß√£o `liberar_threads_eliminadas()`.
 *
 * M√©todos da classe `std::counting_semaphore`:
 * 
 * 1. `acquire()`: Decrementa o contador do sem√°foro. Bloqueia a thread se o valor for zero.
 *    - Exemplo de uso: `cadeira_sem.acquire();` // Jogador tenta ocupar uma cadeira.
 * 
 * 2. `release(int n = 1)`: Incrementa o contador do sem√°foro em `n`. Pode liberar m√∫ltiplas permiss√µes.
 *    - Exemplo de uso: `cadeira_sem.release(2);` // Libera 2 permiss√µes simultaneamente.
 */

// Classes
class JogoDasCadeiras {
public:
    JogoDasCadeiras(int num_jogadores)
        : num_jogadores(num_jogadores), 
        cadeiras(num_jogadores - 1),
        jogadores_restantes(num_jogadores),
        eliminados(num_jogadores, false) {}

    void iniciar_rodada() {
        // TODO: Inicia uma nova rodada, removendo uma cadeira e ressincronizando o sem√°foro
        cadeiras = jogadores_restantes - 1;
        cadeira_sem.release(cadeiras);
    }

    void parar_musica() {
        // TODO: Simula o momento em que a m√∫sica para e notifica os jogadores via vari√°vel de condi√ß√£o
        musica_parada.store(true);
        music_cv.notify_all();
    }

    void eliminar_jogador(int jogador_id) {
        // TODO: Elimina um jogador que n√£o conseguiu uma cadeira
        std::lock_guard<std::mutex> lock(music_mutex);
        if (!eliminados[jogador_id - 1]) {
            eliminados[jogador_id - 1] = true;
            jogadores_restantes--;
            std::cout << "Jogador P" << jogador_id << " n√£o conseguiu uma cadeira e foi eliminado!\n";
        }
    }

    void exibir_estado() {
        // TODO: Exibe o estado atual das cadeiras e dos jogadores
        std::lock_guard<std::mutex> lock(music_mutex);
        std::cout << "\n-----------------------------------------------\n";
        std::cout << "Jogadores restantes: " << jogadores_restantes 
             << " | Cadeiras dispon√≠veis: " << cadeiras << std::endl;
    }

    int get_jogadores_restantes() const { return jogadores_restantes; }
    int get_cadeiras() const { return cadeiras; }

private:
    int num_jogadores;
    int cadeiras;
    int jogadores_restantes;
    std::vector<bool> eliminados;
};

class Jogador {
public:
    Jogador(int id, JogoDasCadeiras& jogo)
        : id(id), jogo(jogo) {}

    void tentar_ocupar_cadeira() {
        // TODO: Tenta ocupar uma cadeira utilizando o sem√°foro contador quando a m√∫sica para (aguarda pela vari√°vel de condi√ß√£o)
        cadeira_sem.acquire(); // Bloqueia at√© conseguir uma cadeira
        
        std::lock_guard<std::mutex> lock(music_mutex);
        if (musica_parada) {
            std::cout << "[Cadeira]: Ocupada por P" << id << std::endl;
        }
    }

    void verificar_eliminacao() {
        // TODO: Verifica se foi eliminado ap√≥s ser destravado do sem√°foro
        if (!musica_parada) {
            jogo.eliminar_jogador(id);
        }
    }

    void joga() {
        // TODO: Aguarda a m√∫sica parar usando a variavel de condicao
        while(jogo_ativo){
            std::unique_lock<std::mutex> lock(music_mutex);
            music_cv.wait(lock, [] { return musica_parada.load() || !jogo_ativo.load(); });
            if (!jogo_ativo) break;
        
        // TODO: Tenta ocupar uma cadeira
        tentar_ocupar_cadeira();
        
        // TODO: Verifica se foi eliminado
        verificar_eliminacao();
        }

    }

private:
    int id;
    JogoDasCadeiras& jogo;
};

class Coordenador {
public:
    Coordenador(JogoDasCadeiras& jogo)
        : jogo(jogo) {}

    void iniciar_jogo() {
        // TODO: Come√ßa o jogo, dorme por um per√≠odo aleat√≥rio, e ent√£o para a m√∫sica, sinalizando os jogadores 
        std::random_device rd;
        std::mt19937 gen(rd());
        std::uniform_int_distribution<> sleep_time(1000, 3000);

        while (jogo.get_jogadores_restantes() > 1) {
            // Fase: m√∫sica tocando
            std::this_thread::sleep_for(std::chrono::milliseconds(sleep_time(gen)));
            
            // Fase: m√∫sica para
            jogo.parar_musica();
            
            // Tempo para os jogadores tentarem se sentar
            std::this_thread::sleep_for(std::chrono::milliseconds(500));

            // Liberar jogadores eliminados
            int eliminacoes = jogo.get_jogadores_restantes() - jogo.get_cadeiras();
            cadeira_sem.release(eliminacoes);
            
            // Resetar para pr√≥xima rodada
            musica_parada.store(false);
            jogo.iniciar_rodada();
            jogo.exibir_estado();
        }
        
        jogo_ativo.store(false);
        music_cv.notify_all();
    }

    void liberar_threads_eliminadas() {
        // Libera m√∫ltiplas permiss√µes no sem√°foro para destravar todas as threads que n√£o conseguiram se sentar
        // Implementado em iniciar_jogo()
    }

private:
    JogoDasCadeiras& jogo;
};

// Main function
int main() {
    JogoDasCadeiras jogo(NUM_JOGADORES);
    Coordenador coordenador(jogo);
    std::vector<std::thread> jogadores;

    // Cria√ß√£o das threads dos jogadores
    std::vector<Jogador> jogadores_objs;
    for (int i = 1; i <= NUM_JOGADORES; ++i) {
        jogadores_objs.emplace_back(i, jogo);
    }

    for (int i = 0; i < NUM_JOGADORES; ++i) {
        jogadores.emplace_back(&Jogador::joga, &jogadores_objs[i]);
    }

    std::vector<std::thread> threads_jogadores;
    for (auto& jogador : jogadores_objs) {
        threads_jogadores.emplace_back(&Jogador::joga, &jogador);
    }

    // Thread do coordenador
    std::thread coordenador_thread(&Coordenador::iniciar_jogo, &coordenador);

    // Esperar pelas threads dos jogadores
    for (auto& t : jogadores) {
        if (t.joinable()) {
            t.join();
        }
    }

    // Esperar pela thread do coordenador
    if (coordenador_thread.joinable()) {
        coordenador_thread.join();
    }

    std::cout << "\nüèÜ Vencedor: ";
    for (int i = 0; i < NUM_JOGADORES; ++i) {
        if (!jogo.get_jogadores_restantes() || (i == NUM_JOGADORES - 1)) {
            std::cout << "P" << (i + 1) << "! Parab√©ns! üèÜ\n";
        }
    }

    std::cout << "Jogo das Cadeiras finalizado." << std::endl;
    return 0;
}

